/* CST8221-JAP: LAB 03, Exercise 2 
   File name: CursorTest.java
*/
import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
/**
 Demonstrates different cursors and how to change them.
 @version 1.14.2
 @author Svillen Ranev
 @see java.awt.Cursor
*/
public class CursorTest extends JFrame {
    //generate serialVersionUID here after the code has been completed and working
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private final JButton button_01;
    private final JPanel pane;
    private final JLabel label_02;  
    private static final String frameTitle = "Cursor Test";
    private final String labelText = "O cursor autal Ã©: ";
    private final int [] cursors;
    private int cursorCounter = 0;
    private final int cursorsMaxNumber;
/**
  Default constructor. Sets the GUI.
*/    
   public CursorTest(){
     //set the frame title
     super(frameTitle);
	  //initialize the array of cursors here using the predefined constants in the Cursor class
/*******************************/
          
	  cursors = new int[]{Cursor.CROSSHAIR_CURSOR,Cursor.DEFAULT_CURSOR,Cursor.E_RESIZE_CURSOR,Cursor.HAND_CURSOR,Cursor.MOVE_CURSOR,Cursor.N_RESIZE_CURSOR,Cursor.N_RESIZE_CURSOR,Cursor.NE_RESIZE_CURSOR,Cursor.NW_RESIZE_CURSOR,Cursor.S_RESIZE_CURSOR,Cursor.SE_RESIZE_CURSOR,Cursor.SW_RESIZE_CURSOR,Cursor.TEXT_CURSOR,Cursor.W_RESIZE_CURSOR,Cursor.WAIT_CURSOR};
/*******************************/
	  cursorsMaxNumber = cursors.length-1;
	  // Create and set up containers and components.
	  button_01 = createButton("Click to change cursor!");
        // create a label to show the name of the cursor
        label_02 = new JLabel(labelText + Cursor.getDefaultCursor().getName());
	  pane = new JPanel();
	  // set a border around the JPanel
	  pane.setBorder(BorderFactory.createEmptyBorder(25, 25, 10, 25));
	  // change the default Layout Manager
	  // use GridLayout with 2 rows and 1 column
	  pane.setLayout(new GridLayout(2, 1));
     // Add components to JPanel container.
	  pane.add(button_01);
	  pane.add(label_02);
      // Install JPanel pane as the content pane of the frame
         this.setContentPane(pane);  
	}
/**
   Creates a button and registers (adds) an ActionListener to process the events generated by the button.
   @param buttonName the button label.
*/   
   private JButton createButton(String buttonName){
     // Create a button 
	JButton  button = new JButton(buttonName);
   //set the initial size of the component
   //in most cases it is better to leave to the UI Manager to determine the preferred size
   button.setPreferredSize(new Dimension(button.getText().length()*20,50));
   // Create a keyboard shortcut: Pressing ALT-C will act as a mouse click on the button	
	button.setMnemonic('C');
	// Create a Tool Tip. Will show up when the mouse hovers over the button
	button.setToolTipText("Please Click Me");
   // Handle the button clicks. Anonymous class is used to handle the events.
   // No need to check for the event source anymore.
   // Now each individual button will be responsible to handle its own events.
   button.addActionListener (new ActionListener(){
   	@Override
   	public void actionPerformed(ActionEvent ae) {
	   //button action: change the cursor shape
      // create a new cursor here: use Cursor.getPredefinedCursor()
      // using one of the cursors array elements as a parameter
/*******************************/	   
   		cursorCounter++;
   		Cursor newCursor = Cursor.getPredefinedCursor(cursors[cursorCounter]);
   		
	   
	   // set the button cursor here: call setCursor() on the button
	   button.setCursor(newCursor);
	   //set the label text here: use getName to get the name of the cursor
	   label_02.setText(labelText + newCursor.getName());        
/*******************************/
       if(cursorCounter ==  cursorsMaxNumber) 
           cursorCounter = 0;     
      }
    });  
   

    return button;
   } 
   
   
/** 
  The main method.The GUI will start with the default Look and Feel - Metal Look and Feel 
  Runs the application GUI in the event dispatch thread (EDT).
  Anonymous class is used to create a runnable object.
  @param args not used
*/  
   public static void main(String[] args) {
     // Make all components to configured by the event dispatch thread.
     // This is the thread that passes user provoked events such as mouse clicks to 
     // the GUI components which have registered listeners for the events.
     // The following code fragment forces the statements in the run() method to be executed in the
     // event dispatch thread. 
     EventQueue.invokeLater(new Runnable()
         {
            @Override
            public void run()
            {
               CursorTest frame = new CursorTest();
               // set up the Close button (X) of the frame
               // no need to use explicitly a WindowListener. The line below will generate one for you. 
               frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
               frame.setSize(300,400);
//               frame.pack();
                
               // make the GUI visible
               frame.setVisible(true);	
            }
         });
     }
}

